using Dates
using HTTP
using MsgPack

abstract type FrameEvent end

struct Event <: FrameEvent
    channel::UInt8
    amplitude::Float32
    size::UInt16
end

struct Overflow <: FrameEvent
    channel::UInt8
    size::UInt16
end

struct Reset <: FrameEvent
    size::UInt16
end

struct Frame <: FrameEvent
    size::UInt16
end


"Parse a single FrameEvent"
function event_parse(data)::FrameEvent
    if haskey(data, "Event")
        values = data["Event"]
        return Event(values[1], values[2], values[3])
    elseif haskey(data, "Overflow")
        values = data["Overflow"]
        return Overflow(values[1], values[2])
    elseif haskey(data, "Reset")
        values = data["Reset"]
        return Reset(values[1])
    elseif haskey(data, "Frame")
        values = data["Frame"]
        return Frame(values[1])
    else
        throw(ArgumentError("Unknown FrameEvent type"))
    end
end

"Parse NumassEvents coming from `/api/process``"
function events_parse(data)
    result = Dict{UInt64, Vector{Tuple{UInt16, FrameEvent}}}()
    for (timestamp, events) in data
        parsed_events = [(event[1], event_parse(event[2])) for event in events]
        result[timestamp] = parsed_events
    end
    return result
end


struct Preprocess
    baseline::Union{Nothing, Vector{Float32}}
    hv::Float32
    start_time::DateTime
    acquisition_time::UInt64
    bad_blocks::Set{Int}
end

"Parse preprocess from `/api/process`"
function preprocess_parse(values)
    baseline = values[1] === nothing ? nothing : Vector{Float32}(values[1])
    hv = Float32(values[2])
    start_time = Dates.DateTime(values[3][1:23]) # стандартная точность только до мс
    acquisition_time = UInt64(values[4])
    bad_blocks = Set{Int}(values[5])
    return Preprocess(baseline, hv, start_time, acquisition_time, bad_blocks)
end


"""
!autogenerated

Process a point by sending data to the `/api/process` endpoint and parsing the response.
Args:
    path (String): The path to the data point.
    process (ProcessParams): The parameters for processing the data point.

Returns:
    Tuple{Dict{UInt64, Vector{Tuple{UInt16, FrameEvent}}}, Preprocess}: A tuple containing
        a dictionary of parsed events and a `Preprocess` struct.
"""
function process_point(path::String, process::ProcessParams)
    resp = HTTP.post(
        "$(_BASE_URL)api/process/$(path)",
        headers=["Content-Type" => "application/json"],
        body=JSON.json(API.to_json(process)) |> String
    )

    (events_msgpack, preprocess_msgpack) = unpack(resp.body)

    return (events_parse(events_msgpack), preprocess_parse(preprocess_msgpack))
end